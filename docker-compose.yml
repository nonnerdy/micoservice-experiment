version: '3.8'

services:
  discovery-service:
    image: discovery-service:latest
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - eureka-network
    environment:
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
      - eureka.instance.hostname=discovery-service
      - eureka.server.wait-time-in-ms-when-sync-empty=0


  config-service:
    image: config-service:latest
    container_name: config-service
    build:
      context: ./config-service
      dockerfile: Dockerfile
    ports:
      - "8762:8762"
    networks:
      - eureka-network
    environment:
      - eureka.client.serviceUrl.default-zone=http://discovery-service:8761/eureka
      - spring.profiles.active=native
      - spring.cloud.config.server.native.search-locations=file:///config/
    volumes:
      - ./config:/config
    depends_on:
      - discovery-service


  gateway-service:
    image: gateway-service:latest
    container_name: gateway-service
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8763:8763"
    networks:
      - eureka-network
    environment:
      - spring.cloud.config.import=configserver:http://config-service:8762
      - spring.application.name=gateway-service
      - eureka.client.service-url.default-zone=http://discovery-service:8761/eureka
      - eureka.client.fetch-registry=true
    depends_on:
      - config-service


  authentication-service:
    image: authentication-service:latest
    container_name: authentication-service
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
    ports:
      - "8767:8767"
    networks:
      - eureka-network
    environment:
      - spring.cloud.config.import="configserver:http://config-service:8762"
      - spring.application.name=authentication-service
      - eureka.client.service-url.default-zone=http://discovery-service:8761/eureka
      - eureka.client.fetch-registry=true
      - spring.datasource.url=jdbc:mysql://mysql-db:3306/userservice
      - spring.datasource.username=root
      - spring.datasource.password=password
      - spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      - spring.jpa.hibernate.ddl-auto=update
      - spring.jpa.show-sql=true
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
      - security.jwt.secret-key=3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      - security.jwt.expiration-time=3600000
    depends_on:
      - config-service
      - mysql-db
  inventory-service:
    image: inventory-service:latest
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8764:8764"
    networks:
      - eureka-network
    environment:
      - spring.cloud.config.import="configserver:http://config-service:8762"
      - spring.application.name=inventory-service
      - eureka.client.service-url.default-zone=http://discovery-service:8761/eureka
      - eureka.client.fetch-registry=true
      - spring.datasource.url=jdbc:mysql://mysql-db:3306/inventory
      - spring.datasource.username=root
      - spring.datasource.password=password
      - spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      - spring.jpa.hibernate.ddl-auto=update
      - spring.jpa.show-sql=true
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
    depends_on:
      - config-service
      - mysql-db


  mysql-db:
    image: mysql:latest
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: userservice
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - eureka-network


networks:
  eureka-network:
    driver: bridge

volumes:
  mysql-data:

